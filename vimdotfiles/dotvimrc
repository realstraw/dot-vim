scriptencoding utf-8

source ~/.safe_vimrc

" Increase minlines for syntax hilighting larger to avoid partially highlighted
" file
let c_minlines=500

" Get pathogen up and running
filetype off
" call pathogen#runtime_append_all_bundles()
call pathogen#incubate()
call pathogen#helptags()
filetype on

"Bind the BufSel() function to a user-command
command! -nargs=1 Bs :call BufSel("<args>")

"*****************************************************************************
" Settings for ctags
"*****************************************************************************
set tags=.tags

"" " Temporarily disable mappings for CommandT to evaluate CtrlP
"" "*****************************************************************************
"" " Settings for Command-t
"" "*****************************************************************************
"" " nnoremap <silent> <C-o> :CommandT<CR>
"" let g:CommandTTraverseSCM = 'pwd'
"" nnoremap <Leader>oo :CommandT<CR>
"" nnoremap <Leader>rr :CommandTFlush<CR>
"" " Set this to ignore target directory
"" set wildignore+=*.o,*.obj,.git,target,build,*.class,*.cache,*.pyc,_build

"*****************************************************************************
" Settings for CtrlP
"*****************************************************************************
nnoremap <Leader>oo :CtrlP<CR>
nnoremap <Leader>ob :CtrlPBuffer<CR>
" Set this to ignore target directory
set wildignore+=*.o,*.obj,.git,target,build,*.class,*.cache,*.pyc,_build


"*****************************************************************************
" Settings for grep
"*****************************************************************************
nnoremap <silent> <C-n> :cn<CR>zv
nnoremap <silent> <C-p> :cp<CR>zv

"*****************************************************************************
" Settings for tagbar
"*****************************************************************************
noremap <C-k> :TagbarToggle<CR>
let g:tagbar_autofocus=1
let g:tagbar_autoclose=1

let g:tagbar_type_scala = {
\ 'ctagstype' : 'Scala',
\ 'kinds'     : [
    \ 'p:packages:1',
    \ 'V:values',
    \ 'v:variables',
    \ 'T:types',
    \ 't:traits',
    \ 'o:objects',
    \ 'a:aclasses',
    \ 'c:classes',
    \ 'r:cclasses',
    \ 'm:methods'
\ ]
\ }

"*****************************************************************************
" NERDTree Plugin Settings
"*****************************************************************************

" Toggle the NERD Tree on and off with ctr-l
nnoremap <C-l> :NERDTreeToggle<CR>
nnoremap <Leader>ll :NERDTreeToggle<CR>
nnoremap <Leader>lh :NERDTreeFind<Cr>

" Show the bookmarks table on startup
let NERDTreeShowBookmarks=1

" Make changing the current root node also modifies pwd as well
let g:NERDTreeChDirMode=2

" Ignore .pyc files
let NERDTreeIgnore = ['\.pyc$']

"*****************************************************************************
" Syntastic Plugin Settings
"*****************************************************************************

nnoremap <Leader>ee :SyntasticToggleMode<CR>

" Default mode for different file types
let g:syntastic_mode_map = { "mode": "active",
                           \ "active_filetypes": [],
                           \ "passive_filetypes": ["java", "scala", "html"] }

"*****************************************************************************
" FSwitch Plugin Settings
"*****************************************************************************

au BufEnter *.cpp let b:fswitchdst = 'hpp,h' | let b:fswitchlocs = '.'
au BufEnter *.hpp let b:fswitchdst = 'cpp' | let b:fswitchlocs = '.'
" Switch to the file and load it into the current window >
nnoremap <silent> <Leader>ff :FSHere<cr>`"
" Switch to the file and load it into the window on the right >
nnoremap <silent> <Leader>fl :FSRight<cr>`"
" Switch to the file and load it into a new window split on the right >
nnoremap <silent> <Leader>fL :FSSplitRight<cr>`"
" Switch to the file and load it into the window on the left >
nnoremap <silent> <Leader>fh :FSLeft<cr>`"
" Switch to the file and load it into a new window split on the left >
nnoremap <silent> <Leader>fH :FSSplitLeft<cr>`"
" Switch to the file and load it into the window above >
nnoremap <silent> <Leader>fk :FSAbove<cr>`"
" Switch to the file and load it into a new window split above >
nnoremap <silent> <Leader>fK :FSSplitAbove<cr>`"
" Switch to the file and load it into the window below >
nnoremap <silent> <Leader>fj :FSBelow<cr>`"
" Switch to the file and load it into a new window split below >
nnoremap <silent> <Leader>fJ :FSSplitBelow<cr>`"

"*****************************************************************************
" YouCompleteMe Plugin Settings
"*****************************************************************************

" Auto close the preview window after leaving insertion model
let g:ycm_autoclose_preview_window_after_insertion=1
" By default, do not show the preview window for hint
set completeopt-=preview

" key map to activate/deactivate the preview hint
nnoremap <Leader>ha :set completeopt+=preview<cr>
nnoremap <Leader>hd :set completeopt-=preview<cr>

" key map to restart the server
nnoremap <Leader>hr :YcmRestartServer<CR>

"*****************************************************************************
" The following is for vim-latex plugin
"*****************************************************************************

" REQUIRED. This makes vim invoke Latex-Suite when you open a tex file.
filetype plugin on

" IMPORTANT: win32 users will need to have 'shellslash' set so that latex
" can be called correctly.
set shellslash

" IMPORTANT: grep will sometimes skip displaying the file name if you
" search in a singe file. This will confuse Latex-Suite. Set your grep
" program to always generate a file-name.
set grepprg=grep\ -nH\ $*

" OPTIONAL: This enables automatic indentation as you type.
filetype indent on

" OPTIONAL: Starting with Vim 7, the filetype of empty .tex files defaults to
" 'plaintex' instead of 'tex', which results in vim-latex not being loaded.
" The following changes the default filetype back to 'tex':
let g:tex_flavor='latex'

" for compile multiple times when needed for pdflatex
let g:Tex_MultipleCompileFormats = 'dvi, pdf'
" for make the default target to pdf when using terminal
let g:Tex_DefaultTargetFormat = 'pdf'

" for \lv to work if using pdflatex in mac
if has('mac') || has('macunix') || has('gui_mac') || has('gui_macvim')
    let g:Tex_ViewRule_pdf = 'open -a Preview.app'
endif

"*****************************************************************************
" The following is for vim-markdown plugin
"*****************************************************************************
" Turn on latex math plugin
let g:vim_markdown_math=1


"*****************************************************************************
" The following is for vim makes
"*****************************************************************************

" Save and make
nnoremap <silent> <Leader>mm :w<CR>:make<CR>

" Make it use maven to compile for Java
compiler ant
set makeprg=mvn\ -q\ compile

"*****************************************************************************
" The following is for scalariform
"*****************************************************************************
au BufEnter *.scala setl formatprg=scalariform\ -f\ -q\ +compactControlReadability\ +alignParameters\ +alignSingleLineCaseStatements\ +doubleIndentConstructorArguments\ +rewriteArrowSymbols\ +preserveSpaceBeforeArguments\ --stdin\ --stdout
au BufEnter *.scala setl equalprg=scalariform\ -f\ -q\ +compactControlReadability\ +alignParameters\ +alignSingleLineCaseStatements\ +doubleIndentConstructorArguments\ +rewriteArrowSymbols\ +preserveSpaceBeforeArguments\ --stdin\ --stdout
